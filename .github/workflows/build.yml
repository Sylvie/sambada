name: Sambada Build

on:
  push:
    paths-ignore:
    - '.github/workflows/verification.yml'
  pull_request:

env:
  CC: gcc-11
  CXX: g++-11

jobs:
  workflow-params:
    name: Determining workflow params
    runs-on: ubuntu-latest
    outputs:
      version-number: ${{ steps.version-number.outputs.sambada_version_number }}
      release-type: ${{ steps.release-status.outputs.sambada_release_type }}
    steps:
      - name: Greetings
        run: |
          echo "Hello!"

      - name: Checking out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetching all tags
        run: |
          git fetch --tags --force

      - name: Determining version number
        id: version-number
        run: |
          sambada_version_number=$(./git-version-gen .version)
          echo ${sambada_version_number}
          echo "::set-output name=sambada_version_number::${sambada_version_number}"
          echo "sambada_version_number=${sambada_version_number}" >> $GITHUB_ENV

      - name: Determining release status
        id: release-status
        run: |
          finalReleaseRegex="^[0-9]\.[0-9]\.[0-9]$"
          releaseCandidateRegex="^[0-9]\.[0-9]\.[0-9](alpha|beta|rc)[0-9]+$"
          echo "Version number: ${sambada_version_number}"
          if [[ "${sambada_version_number}" =~ ${finalReleaseRegex} ]]; then
            echo "This is a final release"
            echo "::set-output name=sambada_release_type::finalRelease"
          elif [[ "${sambada_version_number}" =~ ${releaseCandidateRegex} ]]; then
            echo "This is a release candidate"
            echo "::set-output name=sambada_release_type::releaseCandidate"
          else
            echo "This is not a release"
            echo "::set-output name=sambada_release_type::none"
          fi

  read-params:
    name: Reading workflow params
    runs-on: ${{ matrix.os }}
    needs: workflow-params
    env:
      sambada_version_number: ${{ needs.workflow-params.outputs.version-number }}
      sambada_release_type: ${{ needs.workflow-params.outputs.release-type }}
    strategy:
      matrix:
        os: [ ubuntu-18.04, macos-10.15 ]
      fail-fast: false

    steps:
      - name: Greetings
        run: |
          echo "Hello!"
          echo "Reading output: ${{ needs.workflow-params.outputs.version-number }}"
      - name: Read variables
        run: |
          echo "${sambada_version_number}"
          echo "${sambada_release_type}"
          echo "sambada_version_number=${{ env.sambada_version_number }}" >> $GITHUB_ENV
          echo "release_type=${{ env.sambada_release_type }}" >> $GITHUB_ENV

      - name: Searching for release
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: searching-release
        with:
          debug: true
          script: |
            const { sambada_version_number, sambada_release_type } = process.env
            const isPreRelease = `${sambada_release_type}` == "releaseCandidate";
            const result = console.log(`Release status: ${isPreRelease ? 'Release Candidate' : 'Final Release'}`);
            try
            {
              const response = await github.rest.repos.getReleaseByTag({
                owner: 'Sylvie',
                repo: 'Sambada',
                tag_name: `v${sambada_version_number}`
              });
              console.log(`Response: ${JSON.stringify(response, null, "    ")}`);
              return response;
            }
            catch (error)
            {
                console.log(error.message)
            }

      - name: Searching for current release
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: searching-current-release-pre-creation
        with:
            debug: true
            script: |
              const { sambada_version_number, sambada_release_type } = process.env;
              const query = `query($owner:String!, $name:String!, $tagName:String!) {
                repository(owner: $owner, name: $name) {
                release(tagName: $tagName) {
                                          id
                                          databaseId
                                          createdAt
                                          isDraft
                                          isPrerelease
                                          publishedAt
                                          releaseAssets(last:20) {
                                            edges {
                                              node {
                                                name
                                                }
                                               }
                                                }
                                    }
                                  }
                                }`;
              const variables = {
                              owner: context.repo.owner,
                              name: context.repo.repo,
                              tagName: `v${sambada_version_number}`
                               };
              try {
              const result = await github.graphql(query, variables);
              console.log(result);
                if (result["repository"]["release"] != null) {
                  console.log("Found a release");
                }
                else 
                {
                  console.log("No release found");
                }
                return result
              }
              catch (error)
              {
                console.log(error.message)
              }

      - name: Checking release output ( - positive case)
        if: ${{ ( env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' ) && steps.searching-current-release-pre-creation.outputs.result["repository"]["release"] != null }}
        run: |
          echo "Release found!"

      - name: Checking release output ( - negative case)
        if: ${{ ( env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' ) && steps.searching-current-release-pre-creation.outputs.result["repository"]["release"] != null }}
        run: |
          echo "Release not found!"


      - name: Creating release
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: creating-release
        with:
          debug: true
          script: |
            const { sambada_version_number, sambada_release_type } = process.env
            const isPreRelease = `${sambada_release_type}` == "releaseCandidate";
            const result = console.log(`Release status: ${isPreRelease ? 'Release Candidate' : 'Final Release'}`);
            const response = await github.rest.repos.createRelease({
              owner: 'Sylvie',
              repo: 'Sambada',
              tag_name: `v${sambada_version_number}`,
              name: `v${sambada_version_number}`,
              body: `Sambada release ${sambada_version_number}`,
              draft: true,
              prerelease: isPreRelease
            });
            console.log(`Response: ${JSON.stringify(response, null, "    ")}`);
            return response;

      - name: Listing releases
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: still-searching-release
        with:
          debug: true
          script: |
            const { sambada_version_number, sambada_release_type } = process.env
            const isPreRelease = `${sambada_release_type}` == "releaseCandidate";
            const result = console.log(`Release status: ${isPreRelease ? 'Release Candidate' : 'Final Release'}`);
            const response = await github.rest.repos.listReleases({
              owner: 'Sylvie',
              repo: 'Sambada',
            });
            console.log(`Response: ${JSON.stringify(response, null, "    ")}`);
            return response;

      - name: Searching current release
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: searching-current-release
        with:
          debug: true
          script: |
            const { sambada_version_number, sambada_release_type } = process.env;
            const query = `query($owner:String!, $name:String!, $tagName:String!) {
              repository(owner: $owner, name: $name) {
              release(tagName: $tagName) {
                                        id
                                        databaseId
                                        createdAt
                                        isDraft
                                        isPrerelease
                                        publishedAt
                                        releaseAssets(last:20) {
                                          edges {
                                            node {
                                              name
                                              }
                                             }
                                              }
                                  }
                                }
                              }`;
            const variables = {
                            owner: context.repo.owner,
                            name: context.repo.repo,
                            tagName: `v${sambada_version_number}`
                             };
            const result = await github.graphql(query, variables);
            console.log(result);
            if (result["repository"]["release"] != null) {
               console.log("Found a release");
               console.log(result["repository"]["release"]["id"]);
            }
            else 
            {
              console.log("No release found");
            }
            return result

      - name: Checking release output (positive case)
        if: ${{ ( env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' ) && steps.searching-current-release.outputs.result ["repository"]["release"] != null }}
        run: |
          echo "Release found!"

      - name: Checking release output (negative case)
        if: ${{ ( env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' ) && steps.searching-current-release.outputs.result ["repository"]["release"] != null }}
        run: |
          echo "Release not found!"

      - name: Checking out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Creating fake assets
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        run: |
          mkdir -p "mainfolder/subfolder/"
          echo "Artefact party" > summary.txt
          echo "Hello world!" > mainfolder/asset.txt
          echo "See you soon!" > mainfolder/subfolder/otherasset.txt


      - name: Uploading release asset
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: uploading-asset
        env:
          release_info: ${{steps.creating-release.outputs.result}}
        with:
          debug: true
          script: |
            const directInput = ${{steps.creating-release.outputs.result}}
            console.log(`Direct input: ${JSON.stringify(directInput, null, "    ")}`);
            const { release_info } = process.env;
            console.log(`Release Info: ${JSON.stringify(release_info, null, "    ")}`);
            const releaseInfo = JSON.parse(release_info);
            console.log(`Release Info: ${JSON.stringify(releaseInfo, null, "    ")}`);
            const { data: { id: releaseId } } = releaseInfo;
            console.log(`Release ID: ${releaseId}`)
            const fs = require('fs').promises;
            const response = await github.rest.repos.uploadReleaseAsset({
              owner: 'Sylvie',
              repo: 'Sambada',
              release_id: releaseId,
              name: 'asset.txt',
              data: await fs.readFile(`./mainfolder/asset.txt`)
            });
            console.log(`Response: ${JSON.stringify(response, null, "    ")}`);
            return response;

      - name: Finding release ID
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: finding-release-id
        with:
          debug: true
          script: |
            const releaseInfo = ${{steps.creating-release.outputs.result}}
            console.log(`Direct input: ${JSON.stringify(releaseInfo, null, "    ")}`);
            const { data: { id: releaseId } } = releaseInfo;
            console.log(`Release ID: ${releaseId}`)
            return releaseId;

      - name: Uploading other release asset
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: uploading-other-asset
        with:
          debug: true
          script: |
            console.log(`PWD: ${process.cwd()}`);
            const releaseId = ${{steps.finding-release-id.outputs.result}};
            console.log(`Release ID: ${releaseId}`);
            const fullpath = './mainfolder/subfolder/otherasset.txt';
            const filename = fullpath.split(/[\\\/]/).pop();
            console.log(`Filename: ${filename}`);
            const fs = require('fs').promises;
            const response = await github.rest.repos.uploadReleaseAsset({
              owner: 'Sylvie',
              repo: 'Sambada',
              release_id: releaseId,
              name: filename,
              data: await fs.readFile(fullpath)
            });
            console.log(`Response: ${JSON.stringify(response, null, "    ")}`);
            return response;

      - name: Uploading release asset with script
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        with:
          debug: true
          script: |
            console.log(`PWD: ${process.cwd()}`);
            var fs = require('fs');
            var files = fs.readdirSync('./');
            console.log(`Files: ${files}`);
            const script = require('./.github/workflows/scripts/upload-artefact.js');
            await script({github, releaseId: '${{steps.finding-release-id.outputs.result}}', fullpathToArtefact: './summary.txt'});

  build:
    name: Building
    runs-on: ${{ matrix.os }}
    needs: workflow-params
    env:
      sambada_version_number: ${{ needs.workflow-params.outputs.version-number }}
    strategy:
      matrix:
        os: [ ubuntu-18.04, macos-10.15 ]
        build-type: [ package, distcheck ]
      fail-fast: false

    steps:
      - name: Setting environment variables
        run: |
          runner_OS=${{ matrix.os }}
          sambada_extra_LDFLAGS=""
          if [ "x${runner_OS:0:6}" = "xubuntu" ]; then
            sambada_OS_name=ubuntu
            sambada_extra_LDFLAGS=-static
          else
            sambada_OS_name=OSX
          fi
          echo "sambada_OS_name=${sambada_OS_name}" >> $GITHUB_ENV
          echo "sambada_extra_LDFLAGS=${sambada_extra_LDFLAGS}" >> $GITHUB_ENV
          echo "package_name=sambada-${{ env.sambada_version_number }}-${sambada_OS_name}" >> $GITHUB_ENV
          echo "archive_name=sambada-${{ env.sambada_version_number }}" >> $GITHUB_ENV

      - name: Checking out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetching all tags
        run: |
          git fetch --tags --force

      - name: Installing missing package
        run: |
          brew install automake
          brew install gcc@11

      - name: Configuring
        env:
          LDFLAGS: ${{ env.sambada_extra_LDFLAGS }}
        run: |
          autoreconf -i
          mkdir build
          cd build
          ../configure --disable-manual sambadahostsystemname=${{ env.sambada_OS_name }}

      - name: Building
        if: ${{ matrix.build-type == 'package' && false }}
        run: |
          cd build
          make

      - name: Fake building
        if: ${{ matrix.build-type == 'package' }}
        run: |
          cd build
          mkdir binaries
          cd binaries
          echo "Fake sambada" > sambada
          echo "Fake supervision" > supervision
          echo "Fake recode-plink" > recode-plink
          echo "Fake recode-plink-lfmm" > recode-plink-lfmm

      - name: Running check
        if: ${{ matrix.build-type == 'package' && false }}
        run: |
          cd build
          make check
          cat test-suite.log

      - name: Uploading test results
        if: ${{ matrix.build-type == 'package' && failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-suite-${{ runner.os }}.log
          path: build/test-suite.log
          if-no-files-found: error

      - name: Making archive
        if: ${{ matrix.build-type == 'package' }}
        env:
          sambada_version: ${{ env.sambada_version_number }}
        run: |
          cd build
          make binary-archive
          ls

      - name: Uploading archive
        if: ${{ matrix.build-type == 'package' }}
        uses: actions/upload-artifact@v2
        with:
          name: sambada-archive-${{ env.sambada_OS_name }}.tar.gz
          path: build/${{ env.package_name }}.tar.gz
          if-no-files-found: error

      - name: Running distcheck
        if: ${{ matrix.build-type == 'distcheck' && false }}
        run: |
          cd build
          make distcheck

      - name: Running fake distcheck
        if: ${{ matrix.build-type == 'distcheck' }}
        run: |
          cd build
          make dist

      - name: Uploading source archive (.zip)
        if: ${{ matrix.build-type == 'distcheck' && env.sambada_OS_name == 'ubuntu' }}
        uses: actions/upload-artifact@v2
        with:
          name: dist-zip.zip
          path: build/${{ env.archive_name }}.zip
          if-no-files-found: error

      - name: Uploading source archive (.tar.gz)
        if: ${{ matrix.build-type == 'distcheck' && env.sambada_OS_name == 'ubuntu' }}
        uses: actions/upload-artifact@v2
        with:
          name: dist-tgz.tar.gz
          path: build/${{ env.archive_name }}.tar.gz
          if-no-files-found: error

  sambadoc:
    if: false
    name: Compiling Sambada's manual
    runs-on: ubuntu-latest
    needs: workflow-params
    env:
      sambada_version_number: ${{ needs.workflow-params.outputs.version-number }}
      CC: gcc-10
      CXX: g++-10

    steps:

      - name: Checking out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetching all tags
        run: |
          git fetch --tags --force

      - name: Installing missing package
        run: |
          brew install automake

      - name: Configuring build
        run: |
          autoreconf -i
          mkdir build
          cd build
          ../configure

      - name: Preparing LaTeX compilation
        run: |
          cd build
          make manual/latexmkrc

      - name: Compiling LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: manual.tex
          working_directory: build/manual/
          args: |
            -jobname=sambadoc

      - name: Uploading manual
        uses: actions/upload-artifact@v2
        with:
          name: sambadoc.pdf
          path: build/manual/sambadoc.pdf
          if-no-files-found: error

  fake-sambadoc:
    name: Pseudo-compiling Sambada's manual
    runs-on: ubuntu-latest
    needs: workflow-params
    env:
      sambada_version_number: ${{ needs.workflow-params.outputs.version-number }}
      CC: gcc-10
      CXX: g++-10

    steps:

      - name: Creating fake manual
        run: |
          mkdir -p build/manual
          echo "Pseudo-manual" > build/manual/sambadoc.pdf

      - name: Uploading manual
        uses: actions/upload-artifact@v2
        with:
          name: sambadoc.pdf
          path: build/manual/sambadoc.pdf
          if-no-files-found: error

  release:
    name: Releasing
    runs-on: ${{ matrix.os }}
    needs: [ workflow-params, build, fake-sambadoc ]
    env:
      sambada_version_number: ${{ needs.workflow-params.outputs.version-number }}
      sambada_release_type: ${{ needs.workflow-params.outputs.release-type }}
    strategy:
      matrix:
        os: [ ubuntu-18.04, macos-10.15 ]
      fail-fast: false

    steps:
      - name: Setting environment variables
        run: |
          runner_OS=${{ matrix.os }}
          sambada_extra_LDFLAGS=""
          if [ "x${runner_OS:0:6}" = "xubuntu" ]; then
            sambada_OS_name=ubuntu
            sambada_extra_LDFLAGS=-static
          else
            sambada_OS_name=OSX
          fi
          echo "sambada_OS_name=${sambada_OS_name}" >> $GITHUB_ENV
          echo "sambada_extra_LDFLAGS=${sambada_extra_LDFLAGS}" >> $GITHUB_ENV
          echo "package_name=sambada-${{ env.sambada_version_number }}-${sambada_OS_name}" >> $GITHUB_ENV
          echo "archive_name=sambada-${{ env.sambada_version_number }}" >> $GITHUB_ENV
          echo "release_type=${{ env.sambada_release_type }}" >> $GITHUB_ENV

      - name: Downloading artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Displaying structure of downloaded files
        run: ls -R

      - name: Expanding binary archive
        run: |
          cd artifacts/sambada-archive-${{ env.sambada_OS_name }}.tar.gz
          mkdir expanded_archive
          tar -xvzf ${{ env.package_name }}.tar.gz -C expanded_archive
          ls -lR

      - name: Updating binary archive
        run: |
          cd artifacts/sambada-archive-${{ env.sambada_OS_name }}.tar.gz
          rm -fr expanded_archive/${{ env.package_name }}/manual.txt
          cp ../sambadoc.pdf/sambadoc.pdf expanded_archive/${{ env.package_name }}
          tar -cvzf expanded_archive/${{ env.package_name }}.tar.gz expanded_archive/${{ env.package_name }} -C expanded_archive
          ls -lR

      - name: Uploading new artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.package_name }}.tar.gz
          path: artifacts/sambada-archive-${{ env.sambada_OS_name }}.tar.gz/expanded_archive/${{ env.package_name }}.tar.gz
          if-no-files-found: error

      - name: Creating release
        if: ${{ env.release_type == 'finalRelease' || env.release_type == 'releaseCandidate' }}
        uses: actions/github-script@v6
        id: creating-release
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const isPreRelease = ( ${{ env.release_type }} == "releaseCandidate" );
            octokit.rest.repos.createRelease({
              owner: Sylvie,
              repo: Sambada,
              tag_name: ${{ env.sambada_version_number }},
              name: ${{ env.sambada_version_number }},
              body: "Sambada release ${{ env.sambada_version_number }}",
              draft: true,
              prerelease: ${isPreRelease}
            });

      - name: Get result
        run: echo "${{steps.set-result.outputs.result}}"
