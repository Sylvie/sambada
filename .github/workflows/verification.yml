name: Sambada Verification

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (= tag)'
        required: true
        default: 'v0.8.3'
env:
  CC: gcc-11
  CXX: g++-11

jobs:
  verifying-sambada-release:
    name: Verifying release
    strategy:
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04, macos-11, macos-12 ]
        test-type: [ smoke, integration ]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - name: Setting environment variables
        run: |
          sambada_version=${{ github.event.inputs.version }}
          if [ "x${sambada_version:0:1}" = "xv" ]; then
            sambada_version=${sambada_version:1}
          fi
          echo "Starting verification of Sambada version ${sambada_version}"

          runner_OS=${{ matrix.os }}
          if [ "x${runner_OS:0:6}" = "xubuntu" ]; then
            sambada_OS_name=ubuntu
          else
            sambada_OS_name=OSX
          fi
          echo "sambada_version=${sambada_version}" >> $GITHUB_ENV
          echo "sambada_OS_name=${sambada_OS_name}" >> $GITHUB_ENV
          echo "package_name=sambada-${sambada_version}-${sambada_OS_name}" >> $GITHUB_ENV
          echo "archive_name=sambada-${sambada_version}" >> $GITHUB_ENV

      - name: Checking environment variables
        run: |
          echo "Sambada version: ${{ env.sambada_version }}"
          echo "Sambada OS name: ${{ env.sambada_OS_name }}"
          echo "Sambada package name: ${{ env.package_name }}"

      - name: Installing missing package on macOS
        if: ${{ env.sambada_OS_name == 'OSX' }}
        run: |
          brew install automake
#          echo "AR=$(brew --prefix llvm@15)/bin/llvm-ar" >> $GITHUB_ENV
#          echo "RANLIB=$(brew --prefix llvm@15)/bin/llvm-ranlib" >> $GITHUB_ENV
#          brew install gcc@11
#          export AR=/opt/homebrew/opt/llvm@11/bin/llvm-ar
#          export RANLIB=/opt/homebrew/opt/llvm@11/bin/llvm-ranlib

      - name: Updating command-line tools on macOS 12
        if: ${{  matrix.test-type == 'integration' && matrix.os == 'macos-12'  }}
        run: |
          echo "Hello!"
#          softwareupdate --all --install --force

      - name: Check compilers
        if: ${{  matrix.test-type == 'integration' }}
        run: |
          echo "ld -v"
          ld -v
          echo "gcc-11 is:"
          gcc-11 -v
          echo "g++-11 is:"
          g++-11 -v
          echo "CC is:"
          ${CC} -v
          echo "CXX is:"
          ${CXX} -v
#          echo "Listing /usr/local/Cellar/ :"
#          ls -laR /usr/local/Cellar/

      - name: Downloading package
        run: |
          wget "https://github.com/Sylvie/sambada/releases/download/v${{ env.sambada_version }}/${{ env.package_name }}.tar.gz"
          tar -zxvf ${{ env.package_name }}.tar.gz

      - name: Smoke testing release
        if: ${{ matrix.test-type == 'smoke' }}
        run: |
          cd ${{ env.package_name }}/examples/subset-cattle-SNP
          time ../../binaries/sambada param-cattle.txt cattle-env.csv cattle-mark.txt
          head  cattle-mark-Out-1.txt

      - name: Installing missing package on Ubuntu
        if: ${{ matrix.test-type == 'integration' && matrix.os == 'ubuntu-20.04'  }}
        run: |
          sudo apt-get update
          sudo apt-get install g++-11 -y

      - name: Downloading source code archive
        if: ${{ matrix.test-type == 'integration' }}
        run: |
          wget "https://github.com/Sylvie/sambada/releases/download/v${{ env.sambada_version }}/${{ env.archive_name }}.zip"
          unzip ${{ env.archive_name }}.zip

      - name: Compiling integration tests
        if: ${{ matrix.test-type == 'integration' }}
        run: |
          mkdir -p ${{ env.archive_name }}/build/
          cd ${{ env.archive_name }}
#          autoreconf -i
          cd build/
          ../configure sambadahostsystemname=${{ env.sambada_OS_name }} --disable-manual
          make test/integration/SambadaIntegrationTests
          ln -s ../../${{ env.package_name }}/binaries/ binaries

      - name: Displaying configuration results
        if: ${{  matrix.test-type == 'integration' && failure() }}
        run: |
          cat ${{ env.archive_name }}/build/config.log

      - name: Running integration tests on release
        if: ${{ matrix.test-type == 'integration' }}
        run: |
          cd ${{ env.archive_name }}/build/
          time test/integration/SambadaIntegrationTests
